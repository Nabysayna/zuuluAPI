<?php

namespace AppBundle\Service;

use AppBundle\Service\BalanceService;
use AppBundle\Service\SDEGetterService;
use AppBundle\Service\SLCGetterService;

use Doctrine\ORM\EntityManagerInterface;

use AppBundle\Entity\Authorizedsessions;

class HelloService
{

    private $blcServ;
    private $SDEServ;
    private $SLCServ;

    private $em ;

    public function __construct(EntityManagerInterface $em, BalanceService $blcServ, SDEGetterService $SDEServ, SLCGetterService $SLCServ){

      $this->em = $em ;

      $this->blcServ = $blcServ ;
      $this->SDEServ = $SDEServ ;
      $this->SLCServ = $SLCServ ;

    }



    public function connection($name)
    {


       $credentiales = json_decode($name) ;

       $dbuser = $this->em->getRepository('AppBundle:Users')->findOneBy(array('iduser' => $credentiales->login )) ;

       if (empty($dbuser) )
            return json_encode(array('codeRetour' => '0', 'baseDigest' => '___' ));


       $userId = $credentiales->login ;
       $userPwd = $dbuser->getPassword() ;


	$calculatedDigest = sha1($userId."".$userPwd."".$credentiales->timestamp) ;

        if($credentiales->digest == $calculatedDigest ){

          $baseDigest = base64_encode(sha1($credentiales->login."Da8H@dd_dh".$credentiales->digest)) ;

          $sessionStart = new \Datetime() ;

          $authorizedsession = new Authorizedsessions();
          $authorizedsession->setIduser($dbuser->getIduser());
          $authorizedsession->setCredzuulu($dbuser->getCredzuulu());
          $authorizedsession->setRandomdigest( $baseDigest );
          $authorizedsession->setDatecreation($sessionStart);
          $authorizedsession->setValidite(1);

          $this->em->persist($authorizedsession);
          $this->em->flush();

            return json_encode(array('codeRetour' => '1', 'baseDigest' => $baseDigest ));
        }
        else
            return json_encode(array('codeRetour' => '0', 'baseDigest' =>  '___' ));

    }


    public function heartbeat($name)
    {
	$rti = "" ;

        if (strcmp($this->blcServ->getBalance(), "0")==0)
		$rti = $rti."0";
	else
		$rti = $rti."1" ;

	if (strcmp($this->SDEServ->getBillSDE(), "0")==0)
		$rti = $rti."0";
	else
		$rti = $rti."1" ;

	if (strcmp($this->SLCServ->getBillSLC("8691301356", "221766459226#040186"), "0")==0)
		$rti = $rti."0";
	else
		$rti = $rti."1" ;

        return $rti ;

    }


    public function getBalance($param1, $param2)
    {
        return  $this->blcServ->getBalance()  ;
    }


    public function getBillInfo($ref, $currentDigest)
    {

      return $this->getPattern($ref);

       $dbAuthSession = $this->em->getRepository('AppBundle:Authorizedsessions')->findOneBy(array('randomdigest' => $currentDigest )) ;

       if (empty($dbAuthSession) )
            return json_encode(array('codeRetour' => '0', 'message' => 'Not authorized' ));
       else{
	    $dbPattern = $this->em->getRepository('AppBundle:Patterns')->findOneBy(array('randomdigest' => $currentDigest )) ;
	    return $this->SLCServ->getBillSLC( $ref, $dbAuthSession->getCredzuulu() ) ;
       }

    }

   public function getPattern($ref)
   {
   
    $refSize = strlen($ref) ;    

    $query = $this->em->createQuery(
        'SELECT p
        FROM AppBundle\Entity\Patterns p
        WHERE p.sizemin <= :refSize and  p.sizemax >= :refSize'
    )->setParameter('refSize', $refSize);

    $patterns = $query->execute() ;

    if (empty($patterns))
	return 'No corresponding pattern' ;
    else
      return json_enco$patterns[O] ;


   }



}

